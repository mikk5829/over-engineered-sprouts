#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('over-engineered-sprout:server');
var http = require('http');
var Sentencer = require('sentencer');

var paper = require('paper');
paper.install(this);
paper.setup([400, 200]);


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.log("listening on *:3000")
});

server.on('error', onError);
server.on('listening', onListening);


/*
* Socket IO
* */
const io = require('socket.io').listen(server);
let activeRooms = [];

io.sockets.on('connect', function (socket) {

    // Client has submitted a path -> server will validate the path
    socket.on('submitPath', (segments, from, to, fn) => {
        console.log(`${socket.username} in game ${socket.room.id} submits a path`);
        console.log("segments:", segments);

        let path = new paper.Path().importJSON(segments);
        if (!activeRooms[socket.room].isLegal(from, to, path)) {
            fn(false); // Callback - path not accepted
            return false;
        } else {
            fn(true); // Callback - path accepted
            let resp = activeRooms[socket.room].addPath(from, to, path);
            io.sockets.in(socket.room).emit('updateGame', from, to, resp.segments, resp.newPointData);
            return true;
        }
    });

    // TODO: Only emit to lobby socket
    setInterval(function () {
        let roomList = activeRooms.map(a => a.lobbyRepresentation());
        socket.emit('updateLobby', roomList);
    }, 1000);

    // when the client emits 'join', this listens and executes
    socket.on('join', (requestedUsername, fn) => {
        console.log("Client wants to join with username", requestedUsername);

        String.prototype.capitalize = function () {
            return this.charAt(0).toUpperCase() + this.slice(1);
        };

        let username;
        if (usernameIsValid(requestedUsername)) {
            username = requestedUsername;
        } else {
            do {
                let randInt = Math.floor(Math.random() * 10);
                let adjective = Sentencer.make("{{ adjective }}").capitalize();
                username = adjective + "Guest" + randInt;
            } while (getSockets().some(e => e.username === username));
        }
        socket.username = username;
        console.log("Added user", username);
        fn(username);
    });

    socket.on('changeUsername', (requestedUsername, fn) => {
        if (usernameIsValid(requestedUsername)) {
            console.log(`${socket.username} changed their username to ${requestedUsername}`);
            socket.username = requestedUsername;
            fn(true);
        } else fn(false)
    });

    socket.on('joinRoom', function (id, fn) {
        console.log("joinRoom", socket.username, id);
        if (activeRooms[id] === undefined) fn(false);
        else {
            socket.room = id;
            socket.join(id); // fixme: .room necessary?
            activeRooms[id].playerCount++;
            fn(true);

            if (activeRooms[id].playerCount === 2) {
                let game = activeRooms[id]
                console.log(`2 players connected to game ${id}`);
                let points = [];
                for (let i = 0; i < game.points.length; i++) {
                    points[i] = game.points[i].position;
                }
                io.sockets.in(socket.room).emit('startGame', points);
            }
        }
    });

    // Lets the user connect to an existing room if one exists
    // Otherwise prompts them to create their own room
    socket.on('quickplay', function (fn) {
        if (Object.keys(activeRooms).length === 0) fn(false);
        else {
            Object.keys(activeRooms).forEach((roomId) => {
                let room = activeRooms[roomId];
                if (room.playerCount < 2) {
                    fn(true, roomId);
                }
            })
        }
        fn(false);
    });

    // Client wants to create a new room => server validates room name, creates new room
    socket.on('addRoom', (roomName, fn) => {
        if (activeRooms[roomName] !== undefined) fn(false);
        else {
            console.log("Creating new room: " + roomName);
            let id = activeRooms.length;
            activeRooms[id] = new GameRoom(id, roomName);
            fn(true, id);
        }
    });

    socket.on('sendChat', function (msg) {
        console.log("received sendChat from " + socket.username + ": " + msg);
        let timestamp = +new Date();
        io.sockets.in(socket.room).emit('updateChat', timestamp, socket.username, msg);
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', function () {
        console.log(`${socket.username} disconnected`);
        // if (typeof connectedSockets[socket] !== 'undefined') {
        //     // connectedSockets[socket] = undefined;
        // }
        socket.leave(socket.room);
    });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

function getSockets() {
    return Object.keys(io.sockets.sockets);
}

function usernameIsValid(username) {
    if (!username || !(3 <= username.length <= 15) || !(/^[a-z0-9]+$/i.test(username))) return false;
    return !getSockets().some(e => io.sockets.sockets[e].username === username);
}

class GameRoom {
    constructor(id, name, players = [], numPoints = 10) {
        this.id = id;
        this.name = name;
        this.players = players;
        this.playerCount = 0;
        this.maxCapacity = 2;
        this.project = new paper.Project([300, 150]);
        this.lineGroup = new paper.Group();
        this.points = [];

        // Generate initial points
        for (let i = 0; i < numPoints; i++) {
            let center = this.randomPointPosition();
            this.points[i] = new paper.Path.Circle({
                center: center,
                radius: 10,
                connections: 0,
                edges: []
            });
        }
    }

    addUser(user) {
        // this.players.push(user)
    }

    removeUser(user) {
        //
    }

    addPath(from, to, path) {
        let originalPath = path.clone();
        originalPath.simplify(3);
        // Create new point at midpoint of path
        let pointId = this.points.length
        let newPoint = new paper.Path.Circle({
            // center: path.getPointAt(path.length / 2),
            center: path.getPointAt(path.length/2),
            radius: 10,
            edges: [],
            connections: 0, // fixme?
        });

        function save(from, to, path) {
            from.connections += 1;
            from.edges.push(path);
            to.connections += 1;
            to.edges.push(path);
            path.vertices = [from, to];
            return path;
        }

        // Separate into 2 subpaths - used for pathfinding
        let path2 = path.splitAt(path.length / 2);
        let path1 = path.clone();
        path1.insert(0, this.points[from].center);
        path2.add(this.points[to].center);
        path1.vertices = [];
        path2.vertices = [];
        path1.simplify(3);
        path2.simplify(3);

        save(this.points[from], newPoint, path1);
        save(newPoint, this.points[to], path2);

        path1.addTo(this.lineGroup);
        path2.addTo(this.lineGroup);
        this.points[pointId] = newPoint;

        // Return the unsplit path and the new poin
        let newPointData = {
            // x: newPoint.
            center: newPoint.position,
            id: pointId,
            connections: 2
        };

        return {segments: originalPath.exportJSON(), newPointData: newPointData};
    }

    lobbyRepresentation() {
        // Returns a representation of this gameroom for the game lobby
        return {
            capacity: `${this.playerCount}/${this.maxCapacity}`,
            id: '' + this.id,
            name: this.name
        }
    }

    isLegal(from, to, path) {
        // check legality of a path
        if (!(from || to)) return false;
        else if (from === to && from.connections >= 2) return false;
        else if (from.connections >= 3 || to.connections >= 3) return false;

        this.project.activate();
        if (this.project.hitTest(path)) {
            console.log("hit something");
        } else console.log("didn't hit anything");
        return path.getIntersections(path).length <= 0;
    }

    randomPointPosition() {
        this.project.activate();
        // FIXME: Point's center needs to be at least one point's distance from the game border
        const x = Math.floor(Math.random() * paper.view.size.width);
        const y = Math.floor(Math.random() * paper.view.size.height);
        const point = new paper.Point(x, y);
        console.log(point.round())
        return point.round();
    }
}