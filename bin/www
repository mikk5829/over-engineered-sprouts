#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('over-engineered-sprout:server');
var http = require('http');
var Sentencer = require('sentencer');
// const gameServer = require('/public/scripts/game-server.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.log("listening on *:3000")
});

server.on('error', onError);
server.on('listening', onListening);


/*
* Socket IO stuff
* */
const io = require('socket.io').listen(server);
let connectedSockets = [];
let activeRooms = [];

io.sockets.on('connect', function (socket) {

    socket.on('path', function (data, fn) {
        console.log(data);
        fn("gotcha");

        // send to room including sender:
        // io.sockets.in(socket.room).emit('updateGame', "hej venner");

        // send to room excluding sender:
        socket.broadcast.to(socket.room).emit('updateGame', data);
    });

    // TODO: Only emit to lobby socket
    setInterval(function () {
        socket.emit('updateLobby', activeRooms);
    }, 1000);

    // when the client emits 'join', this listens and executes
    socket.on('join', (requestedUsername, fn) => {
        String.prototype.capitalize = function () {
            return this.charAt(0).toUpperCase() + this.slice(1);
        };

        let username;
        console.log("Client wants to join with username", requestedUsername);
        if (isValid(requestedUsername)) {
            username = requestedUsername;
            // TODO: check other requirements here
        } else {
            do {
                let randInt = Math.floor(Math.random() * 10);
                let adjective = Sentencer.make("{{ adjective }}").capitalize();
                username = adjective + "Guest" + randInt;
            } while (connectedSockets.some(e => e.username === username));
        }
        socket.username = username;
        connectedSockets.push(socket);
        console.log("Added user", username);
        fn(username);
    });

    function isValid(username) {
        // todo check if username is legal
        // if (requestedUsername && !connectedSockets.some(e => e.username === username)) {
    }

    socket.on('changeUsername', (requestedUsername, fn) => {
        if (isValid(requestedUsername)) {
            //todo update the username of the socket and in the list, fn(true)
        } else fn(false)
    });

    socket.on('joinRoom', function (id, fn) {
        console.log("joinRoom", socket.username, id);
        if (!activeRooms.some(e => e.id === id)) fn(false);
        else {
            socket.room = id;
            socket.join(id);
            fn(true);
        }

    });

    // Lets the user connect to an existing room if one exists
    // Otherwise prompts them to create their own room
    socket.on('quickplay', function (fn) {
        if (activeRooms.length === 0) fn(false);
        else {
            fn(true, activeRooms[0].id);
        }
    });

    socket.on('addRoom', function (id, fn) {
        if (activeRooms.some(r => r.id === id)) fn(false);
        else {
            console.log("Creating new room: " + id);
            activeRooms.push({
                'id': id,
                'maxCapacity': 2,
                'playerCount': 0
            });
            fn(true, id);
            io.emit('updateLobby', activeRooms,)
        }
    });

    socket.on('sendChat', function (msg) {
        console.log("received sendChat from " + socket.username + ": " + msg);
        let timestamp = +new Date();
        io.sockets.in(socket.room).emit('updateChat', timestamp, socket.username, msg);
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', function () {
        // Remove username from list
        const index = connectedSockets.indexOf(socket.username);
        if (index > -1) connectedSockets.splice(index, 1);
        socket.leave(socket.room);
    });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


