#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('over-engineered-sprout:server');
var http = require('http');
var Sentencer = require('sentencer');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.log("listening on *:3000")
});

server.on('error', onError);
server.on('listening', onListening);


/*
* Socket IO stuff
* */
var io = require('socket.io').listen(server);

var usernames = [];
var rooms = [];
io.sockets.on('connection', function (socket) {
    socket.emit('updaterooms', rooms);
    setInterval(function () {
        socket.emit('updaterooms', rooms);
    }, 1000);

    // when the client emits 'adduser', this listens and executes
    socket.on('adduser', function (fn) {
        String.prototype.capitalize = function () {
            return this.charAt(0).toUpperCase() + this.slice(1);
        };

        let name;
        do {
            var randInt = Math.floor(Math.random() * 10);
            var adjective = Sentencer.make("{{ adjective }}").capitalize();
            name = adjective + "Guest" + randInt;
        } while (usernames.includes(name));

        socket.username = name;
        usernames.push(name);
        console.log("Added user", name);
        fn(name);
    });

    socket.on('joinroom', function (room, fn) {
        console.log("joinroom", socket.username, room);
        socket.room = room;
        socket.join(room);
        fn(`game-${room}`);

    });

    // Lets the user connect to an existing room if one exists
    // Otherwise prompts them to create their own room
    socket.on('quickplay', function (fn) {
        if (rooms.length === 0) fn(false);
        else {
            fn(true, rooms[0]);
        }
    });

    socket.on('addroom', function (id, fn) {
        if (rooms.includes(id)) fn(false);
        else {
            console.log("Creating new room: " + id);
            rooms.push(id);
            // nsp.push(io.of('/' + id));
            fn(true, id);
            io.emit('updaterooms', rooms,)
        }
    });

    socket.on('sendchat', function (msg) {
        console.log("received sendchat from " + socket.username + ": " + msg);
        let timestamp = +new Date();
        io.sockets.in(socket.room).emit('updatechat', timestamp, socket.username, msg);
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', function () {
        // Remove username from list
        const index = usernames.indexOf(socket.username);
        if (index > -1) usernames.splice(index, 1);
        socket.leave(socket.room);
    });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


