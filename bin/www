#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('over-engineered-sprout:server');
var http = require('http');
var Sentencer = require('sentencer');

var paper = require('paper');
paper.install(this);
paper.setup([400, 200]);


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.log("listening on *:3000")
});

server.on('error', onError);
server.on('listening', onListening);


/*
* Socket IO
* */
const io = require('socket.io').listen(server);
let activeRooms = [];

io.sockets.on('connect', function (socket) {

    // Client has submitted a path -> server will validate the path
    socket.on('submitPath', (from, to, path, fn) => {
        console.log(`${socket.username} in game ${socket.room.id} submits a path`);

        let game = socket.room.game;
        if (!game.isLegal(from, to, path)) {
            fn(false); // Callback - path not accepted
            return false;
        } else {
            fn(true); // Callback - path accepted
            io.sockets.in(socket.room).emit('updateGame', game.savePath(from, to, path));
            return true;
        }
    });

    // TODO: Only emit to lobby socket
    setInterval(function () {
        socket.emit('updateLobby', Object.values(activeRooms));
    }, 1000);

    // when the client emits 'join', this listens and executes
    socket.on('join', (requestedUsername, fn) => {
        console.log("Client wants to join with username", requestedUsername);

        String.prototype.capitalize = function () {
            return this.charAt(0).toUpperCase() + this.slice(1);
        };

        let username;
        if (usernameIsValid(requestedUsername)) {
            username = requestedUsername;
        } else {
            do {
                let randInt = Math.floor(Math.random() * 10);
                let adjective = Sentencer.make("{{ adjective }}").capitalize();
                username = adjective + "Guest" + randInt;
            } while (getSockets().some(e => e.username === username));
        }
        socket.username = username;
        console.log("Added user", username);
        fn(username);
    });

    socket.on('changeUsername', (requestedUsername, fn) => {
        if (usernameIsValid(requestedUsername)) {
            //todo update the username of the socket and in the list, fn(true)
            console.log(`${socket.username} changed their username to ${requestedUsername}`);
            socket.username = requestedUsername;
            fn(true);
        } else fn(false)
    });

    socket.on('joinRoom', function (id, fn) {
        console.log("joinRoom", socket.username, id);
        if (activeRooms[id] === undefined) fn(false);
        else {
            socket.room = id;
            socket.join(id);
            activeRooms[id].playerCount++;
            fn(true);

            if (activeRooms[id].playerCount === 2) {
                console.log(`2 players connected to game ${id}`);
                console.log(activeRooms[id].game.points[0]);

                /*let pointList = [];
                for (let point of activeRooms[id].game.points) {
                    pointList.push()
                }*/
                //todo: emit json strings (json.stringify), not the objects themselves
                io.sockets.in(socket.room).emit('startGame', activeRooms[id].game.points);
            }
        }
    });

    // Lets the user connect to an existing room if one exists
    // Otherwise prompts them to create their own room
    socket.on('quickplay', function (fn) {
        if (Object.keys(activeRooms).length === 0) fn(false);
        else {
            Object.keys(activeRooms).forEach((roomId) => {
                let room = activeRooms[roomId];
                if (room.playerCount < 2) {
                    fn(true, roomId);
                }
            })
        }
        fn(false);
    });

    // Client wants to create a new room => server validates room name, creates new room
    socket.on('addRoom', (id, fn) => {
        if (activeRooms[id] !== undefined) fn(false);
        else {
            console.log("Creating new room: " + id);
            activeRooms[id] = ({
                'id': id,
                'maxCapacity': 2,
                'playerCount': 0,
                'game': new Game(id)
            });
            fn(true, id);
        }
    });

    socket.on('sendChat', function (msg) {
        console.log("received sendChat from " + socket.username + ": " + msg);
        let timestamp = +new Date();
        io.sockets.in(socket.room).emit('updateChat', timestamp, socket.username, msg);
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', function () {
        console.log(`${socket.username} disconnected`);
        // if (typeof connectedSockets[socket] !== 'undefined') {
        //     // connectedSockets[socket] = undefined;
        // }
        socket.leave(socket.room);
    });
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);
    if (isNaN(port)) return val;
    if (port >= 0) return port;
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

function getSockets() {
    return Object.keys(io.sockets.sockets);
}

function usernameIsValid(username) {
    if (!username || !(3 <= username.length <= 15) || !(/^[a-z0-9]+$/i.test(username))) return false;
    return !getSockets().some(e => io.sockets.sockets[e].username === username);
}

class Game {
    constructor(id, initPoints = 10) {
        this.id = id;
        this.playerCount = 0;
        this.maxCapacity = 2;
        this.project = new paper.Project([400, 200]);
        this.lineGroup = new paper.Group();
        this.points = [];
        this.initializePoints(initPoints);
    }

    isLegal(from, to, path) {
        // check legality of a path
        if (!(from || to)) return false;
        else if (from === to && from.connections >= 2) return false;
        else if (from.connections >= 3 || to.connections >= 3) return false;

        this.project.activate();
        if (this.project.hitTest(path)) {
            console.log("hit something");
        } else console.log("didn't hit anything");
        return path.getIntersections(path).length <= 0;
    }

    addPath(from, to, path) {
        from.connections += 1;
        from.edges.push(path);
        to.connections += 1;
        to.edges.push(path);
        path.vertices = [from, to];
        path.addTo(this.lineGroup);
        return path;
    }

    addPoint(location, connections = 0) {
        let point = new paper.Path.Circle({
            center: location,
            radius: 10
        });
        point.center = location;
        point.connections = connections;
        this.points.push(point);
        return point;
    }

    savePath(from, to, path) {
        // first check if legal, then:
        if (!this.isLegal(from, to, path)) return false;

        // New point at midpoint
        let newPoint = this.addPoint(path.getPointAt(path.length / 2));

        let path2 = path.splitAt(path.length / 2);
        let path1 = path.clone();
        path1.insert(0, source.center);
        path2.add(to.center);
        path1.vertices = [];
        path2.vertices = [];
        path1.simplify(3);
        path2.simplify(3);

        path1 = this.addPath(from, newPoint, path1);
        path2 = this.addPath(newPoint, to, path2);

        return {
            path1: path1,
            path2: path2,
            newPoint: newPoint
        }
    }

    initializePoints(amount) {
        for (let i = 0; i < amount; i++) {
            this.addPoint(this.randomPointPosition());
        }
    }

    randomPointPosition() {
        this.project.activate();
        // FIXME: Point's center needs to be at least one point's distance from the game border
        const x = Math.floor(Math.random() * paper.view.size.width);
        const y = Math.floor(Math.random() * paper.view.size.height);
        const point = new paper.Point(x, y);
        return point.round();
    }
}